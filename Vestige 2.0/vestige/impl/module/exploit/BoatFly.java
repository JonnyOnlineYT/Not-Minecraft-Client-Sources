package vestige.impl.module.exploit;

import java.util.LinkedList;

import org.lwjgl.input.Keyboard;

import com.mojang.realmsclient.gui.ChatFormatting;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import vestige.api.event.Listener;
import vestige.api.event.impl.PacketSendEvent;
import vestige.api.event.impl.UpdateEvent;
import vestige.api.module.Category;
import vestige.api.module.Module;
import vestige.api.module.ModuleInfo;
import vestige.api.setting.impl.ModeSetting;
import vestige.api.setting.impl.NumberSetting;
import vestige.util.movement.MovementUtils;
import vestige.util.network.PacketUtil;

@ModuleInfo(name = "BoatFly", category = Category.EXPLOIT)
public class BoatFly extends Module {
	
	private boolean wasRidingEntity = false;
	private boolean highjumping = false;
	private int ticksHighJumping = 0;
	
	private LinkedList<Packet> packets = new LinkedList<>();

	public void onEnable() {
		wasRidingEntity = false;
		highjumping = false;
		ticksHighJumping = 0;
	}

	public void onDisable() {
		mc.thePlayer.speedInAir = 0.02F;
		mc.timer.timerSpeed = 1F;
		sendPackets();
		mc.thePlayer.capabilities.isFlying = false;
	}
	
	@Listener
	public void onSend(PacketSendEvent event) {
		if (highjumping) {
			if (event.getPacket() instanceof C03PacketPlayer) {
				event.setCancelled(true);
				packets.add(event.getPacket());
			} else if (event.getPacket() instanceof C08PacketPlayerBlockPlacement) {
				event.setCancelled(true);
			}
		}
	}
	
	@Listener
	public void onUpdate(UpdateEvent event) {
		if(mc.thePlayer.isRiding()) {
			wasRidingEntity = true;
		} else {
			if(wasRidingEntity) {
				ticksHighJumping = 0;
				highjumping = true;
				wasRidingEntity = false;
			}
		}

		if(highjumping && ticksHighJumping < 28) {
			mc.thePlayer.capabilities.isFlying = true;
			mc.thePlayer.capabilities.setFlySpeed(0.12F);
		}

		if(highjumping) {
			if(ticksHighJumping < 30 && !(mc.gameSettings.keyBindSneak.isKeyDown() && ticksHighJumping > 5)) {
				ticksHighJumping++;
			} else {
				this.sendPackets();
				highjumping = false;
				mc.thePlayer.capabilities.isFlying = false;
			}
		}
	}

	public boolean isHighjumping() {
		return highjumping;
	}
	
	
	public void sendPackets() {
		if(!packets.isEmpty()) {
			packets.forEach(p -> PacketUtil.sendPacketNoEvent(p));
			packets.clear();
		}
	}
	
}