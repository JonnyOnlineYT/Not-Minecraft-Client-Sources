package vestige.impl.module.exploit;

import java.util.LinkedList;

import net.minecraft.block.Block;
import net.minecraft.block.BlockGlass;
import net.minecraft.block.BlockStainedGlass;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0BPacketEntityAction.Action;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.ChatComponentText;
import vestige.Vestige;
import vestige.api.event.Listener;
import vestige.api.event.Priority;
import vestige.api.event.impl.MotionEvent;
import vestige.api.event.impl.MoveEvent;
import vestige.api.event.impl.PacketReceiveEvent;
import vestige.api.event.impl.PacketSendEvent;
import vestige.api.module.Category;
import vestige.api.module.Module;
import vestige.api.module.ModuleInfo;
import vestige.api.setting.impl.BooleanSetting;
import vestige.api.setting.impl.ModeSetting;
import vestige.api.setting.impl.NumberSetting;
import vestige.impl.module.movement.Fly;
import vestige.impl.module.movement.Speed;
import vestige.impl.module.world.OldScaffold;
import vestige.impl.module.world.Scaffold;
import vestige.util.misc.LogUtil;
import vestige.util.misc.TimerUtil;
import vestige.util.network.DelayedPacketThread;
import vestige.util.network.PacketUtil;
import vestige.util.network.ServerUtils;

@ModuleInfo(name = "Disabler", category = Category.EXPLOIT)
public class Disabler extends Module {

    public final ModeSetting mode = new ModeSetting("Mode", this, "Transaction", "Watchdog", "Watchdog old", "Watchdog Timer", "Blocksmc Combat", "MMC Combat", "Transaction", "ColdPvP", "Verus", "PingSpoof", "Test");
    
    public final NumberSetting pingDelay = new NumberSetting("Ping Delay", this, 2000, 200, 10000, 200, true) {
    	@Override
    	public boolean isShown() {
    		return mode.is("PingSpoof");
    	}
    };
    
    public final NumberSetting s08PingDelay = new NumberSetting("S08 Ping Delay", this, 2000, 200, 10000, 200, true) {
    	@Override
    	public boolean isShown() {
    		return mode.is("PingSpoof");
    	}
    };
    
    public final BooleanSetting s08 = new BooleanSetting("S08", this, false) {
    	@Override
    	public boolean isShown() {
    		return mode.is("PingSpoof");
    	}
    };
    
    private final BooleanSetting omniSprint = new BooleanSetting("Omnisprint", this, true) {
    	@Override
    	public boolean isShown() {
    		return mode.is("Watchdog old");
    	}
    };
    
    private final BooleanSetting oldStrafeDisabler = new BooleanSetting("Old Strafe Disabler", this, false) {
    	@Override
    	public boolean isShown() {
    		return mode.is("Watchdog old");
    	}
    };
    
    private final BooleanSetting balance = new BooleanSetting("Balance", this, true) {
    	@Override
    	public boolean isShown() {
    		return mode.is("Watchdog old");
    	}
    };
    
    private final LinkedList<Packet> packetsQueue = new LinkedList<>();
    
    private final TimerUtil timerUtil = new TimerUtil();
    
    private int delay;
    
    private boolean gameStarted;
    private boolean expectedTeleport;
    
    public Disabler() {
        this.registerSettings(mode, pingDelay, s08, s08PingDelay, omniSprint, oldStrafeDisabler, balance);
    }
    
    public void onEnable() {
    	packetsQueue.clear();
    	timerUtil.reset();
    	gameStarted = true;
    	expectedTeleport = false;
    }
    
    public void onDisable() {
    	
    }
    
    @Listener
    public void onReceive(PacketReceiveEvent event) {
    	switch (mode.getMode()) {
    		case "Watchdog old":
    			if (event.getPacket() instanceof S08PacketPlayerPosLook) {
    				S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) event.getPacket();
    				
    				if(oldStrafeDisabler.isEnabled()) {
    					if(mc.getNetHandler().doneLoadingTerrain) {
        					if(mc.thePlayer.ticksExisted < 105) {
        						event.setCancelled(true);
        					}
        				}
    				}
    			}
    			break;
    		case "Test":
    			if (event.getPacket() instanceof S08PacketPlayerPosLook) {
    				S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) event.getPacket();
    				
    				if(mc.getNetHandler().doneLoadingTerrain) {
    					if(mc.thePlayer.ticksExisted < 50) {
    						event.setCancelled(true);
                            PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
                            PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY() + 1, packet.getZ(), packet.getYaw(), packet.getPitch(), false));
    					} else if(mc.thePlayer.ticksExisted % 5 != 0) {
                            event.setCancelled(true);
                            PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
                        }
    				}
    			}
    			break;
    		case "Verus":
    			if (event.getPacket() instanceof S08PacketPlayerPosLook) {
    				S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) event.getPacket();
    				
    				if(mc.thePlayer.getDistance(packet.getX(), packet.getY(), packet.getZ()) < 8) {
    					//event.setCancelled(true);
    					//PacketUtil.sendPacketNoEvent(new C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
    				}
    			}
    			break;
    		case "ColdPvP":
    			if (event.getPacket() instanceof S08PacketPlayerPosLook) {
    				S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) event.getPacket();
    				
    				/*
    				if(mc.getNetHandler().doneLoadingTerrain) {
    					if(mc.thePlayer.getDistance(packet.getX(), packet.getY(), packet.getZ()) < 2) {
    						event.setCancelled(true);
    						PacketUtil.sendPacketNoEvent(new C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
    					}
    				}
    				*/
    				
    				/*
    				if(mc.getNetHandler().doneLoadingTerrain && expectedTeleport) {
    					if(mc.thePlayer.getDistance(packet.getX(), packet.getY(), packet.getZ()) < 30) {
    						event.setCancelled(true);
    						PacketUtil.sendPacketNoEvent(new C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
    						if(!packetsQueue.isEmpty()) {
    							packetsQueue.forEach(p -> PacketUtil.sendPacketNoEvent(p));
    							packetsQueue.clear();
    						}
    						expectedTeleport = false;
    					}
    				} else {
    					packetsQueue.clear();
    				}
    				expectedTeleport = false;
    				*/
    			}
    			break;
    	}
    }

    @Listener(Priority.LOWEST)
    public void onSend(PacketSendEvent event) {
        switch (mode.getMode()) {
            case "Watchdog old":
            	if (event.getPacket() instanceof C03PacketPlayer) {
            		C03PacketPlayer packet = (C03PacketPlayer) event.getPacket();
            		
            		//PacketUtil.sendPacketNoEvent(new C0BPacketEntityAction(mc.thePlayer, Action.RIDING_JUMP));
            		
            		if (balance.isEnabled()) {
                    	if(!packet.isMoving() && !(packet.getRotating() && mc.thePlayer.ticksExisted > 150) && mc.thePlayer.ticksExisted > 20 && mc.getNetHandler().doneLoadingTerrain && !Vestige.getInstance().getModuleManager().getModule(Scaffold.class).isEnabled()) {
                            event.setCancelled(true);
                        }
                    }
            		
            		if (oldStrafeDisabler.isEnabled()) {
            			if(mc.thePlayer.ticksExisted < 30) {
                    		packet.x = Math.random() * 500 - 250;
                    		packet.y = Math.random() * 500 - 100;
                    		packet.z = Math.random() * 500 - 250;
                    	}
            		}
            	} else if (event.getPacket() instanceof C0BPacketEntityAction) {
                    C0BPacketEntityAction p = (C0BPacketEntityAction) event.getPacket();
                    
                    if(omniSprint.isEnabled()) {
                    	if (p.getAction() == C0BPacketEntityAction.Action.START_SPRINTING || p.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                            event.setCancelled(true);
                        }
                    }
                }
                break;
            case "Watchdog":
            	if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
            		new DelayedPacketThread(event.getPacket(), mc.thePlayer.ticksExisted < 150 ? 1000 : 450).start();
            		event.setCancelled(true);
            	}
            	break;
            case "Watchdog Timer":
            	if (event.getPacket() instanceof C03PacketPlayer) {
            		C03PacketPlayer packet = (C03PacketPlayer) event.getPacket();
            		
            		if(mc.thePlayer.ticksExisted <= 30) {
            			gameStarted = false;
            		}
            		
            		if (!gameStarted) {
            			event.setCancelled(true);
            		} else if (!packet.isMoving() && !packet.getRotating() && !mc.thePlayer.isUsingItem()) {
            			event.setCancelled(true);
            		}
            	} else if (event.getPacket() instanceof C0BPacketEntityAction) {
                    C0BPacketEntityAction packet = (C0BPacketEntityAction) event.getPacket();
                    
                    if (packet.getAction() == Action.START_SPRINTING || packet.getAction() == Action.STOP_SPRINTING) {
                        event.setCancelled(true);
                    }
                }
            	break;
            case "Test":
            	if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
            		//new DelayedPacketThread(event.getPacket(), 350).start();
            		//event.setCancelled(true);
            	}
            	break;
            case "Transaction":
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    event.setCancelled(true);
                } else if (event.getPacket() instanceof C00PacketKeepAlive) {
                    event.setCancelled(true);
                }
                break;
            case "MMC Combat":
            	if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
            		/*
            		if(mc.thePlayer.ticksExisted % 1500 < 1400) {
            			new DelayedPacketThread(event.getPacket(), 600).start();
                		event.setCancelled(true);
            		} else {
            			if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
            				Vestige.getInstance().addChatMessage("Disabler debug : pingspoof pause to avoid a timed out kick");
            			}
            		}
            		*/
            		new DelayedPacketThread(event.getPacket(), 600).start();
            		event.setCancelled(true);
            	}
            	break;
            case "ColdPvP":
            	if (event.getPacket() instanceof C03PacketPlayer) {
            		C03PacketPlayer packet = (C03PacketPlayer) event.getPacket();
            		
            		Fly fly = (Fly) Vestige.getInstance().getModuleManager().getModule(Fly.class);
            		
            		if (mc.thePlayer.ticksExisted % 16 == 0 && mc.getNetHandler().doneLoadingTerrain && fly.isEnabled() && fly.mode.is("Vanilla")) {
            			packetsQueue.add(packet);
            			packet.y -= 11;
            			expectedTeleport = true;
            		} else {
            			//if(expectedTeleport) {
            			//	event.setCancelled(true);
            			//	packetsQueue.add(packet);
            			//}
            		}
            	}
            	if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
            		new DelayedPacketThread(event.getPacket(), 15000).start();
            		event.setCancelled(true);
            	}
            	break;
            case "Blocksmc Combat":
            	if (event.getPacket() instanceof C03PacketPlayer) {
           		 	C03PacketPlayer packet = (C03PacketPlayer) event.getPacket();
           		 	
           		 	if(mc.thePlayer.ticksExisted < 50) {
           		 		event.setCancelled(true);
           		 	} else if (!packet.isMoving() && !packet.getRotating() && !mc.thePlayer.isUsingItem()) {
           		 		event.setCancelled(true);
                 	}
            	} else if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
    				C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) event.getPacket();
    				
    				if(packetsQueue.size() < 400) {
    					event.setCancelled(true);
    					packetsQueue.add(packet);
    				}
    			}
            	break;
            case "PingSpoof":
            	if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
            		event.setCancelled(true);
            		new DelayedPacketThread(event.getPacket(), (long) pingDelay.getCurrentValue()).start();
            	}
            	
            	if(!mc.getNetHandler().doneLoadingTerrain && mc.thePlayer.ticksExisted > 150) {
        			mc.getNetHandler().onDisconnect(new ChatComponentText("Took too long to load"));
        			//mc.getNetHandler().doneLoadingTerrain = true;
        		}
            	break;
            case "Verus":
            	if (event.getPacket() instanceof C03PacketPlayer) {
            		C03PacketPlayer packet = (C03PacketPlayer) event.getPacket();
            		
            		if(mc.thePlayer.ticksExisted % 40 == 0) {
            			packet.y -= 11;
            			packet.onGround = false;
            		}
            	} else if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
            		C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) event.getPacket();
            		
            		//if(packet.getUid() != -1) {
            			event.setCancelled(true);
                		packetsQueue.add(event.getPacket());
            		//}
            		
            		Vestige.getInstance().addChatMessage("Packets Queue : " + packetsQueue.size());
            		
            		if(packetsQueue.size() >= 50) {
    					//packetsQueue.poll();
    				}
            	}
            	break;
        }
    }
    
    @Listener
    public void onMove(MoveEvent event) {
    	switch (mode.getMode()) {
    		case "Watchdog Timer":
    			if(!gameStarted) {
    				event.setCancelled(true);
    				mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0;
    			}
    			break;
    	}
    }
    
    @Listener
    public void onMotion(MotionEvent event) {
		setSuffix(mode.getMode());
    	switch (mode.getMode()) {
    		case "Blocksmc Combat":
    			if(timerUtil.getTimeElapsed() >= 850) {
    				if(!packetsQueue.isEmpty()) {
    					if(packetsQueue.size() < 400) {
    						PacketUtil.sendPacketNoEvent(packetsQueue.poll());
    					} else {
    						/*
    						for(Packet p : transactionsQueue) {
    							PacketUtil.sendPacketNoEvent(p);
    						}
    						*/
    						for(int i = 0; i < packetsQueue.size() / 3; i++) {
    							PacketUtil.sendPacketNoEvent(packetsQueue.poll());
    						}
    						packetsQueue.clear();
    						
    					}
    					
    					//PacketUtil.sendPacketNoEvent(transactionsQueue.poll());
    				}
    				timerUtil.reset();
    			}
    			break;
    		case "Watchdog Timer":
    			if(mc.thePlayer.ticksExisted > 50) {
    				boolean glassUnder = false;
    				
    				for(double y = event.getY() + 4; y >= event.getY() - 6; y--) {
    					Block block = mc.theWorld.getBlockState(new BlockPos(mc.thePlayer.posX, y, mc.thePlayer.posZ)).getBlock();
    					if(block instanceof BlockGlass || block instanceof BlockStainedGlass) {
    						glassUnder = true;
    					}
    				}
    				
    				if(!glassUnder) {
    					gameStarted = true;
    				}
    			}
    			break;
    		case "Verus":
    			if(timerUtil.getTimeElapsed() >= 500) {
    				if(packetsQueue.size() <= 50) {
    					if(!packetsQueue.isEmpty()) {
        					packetsQueue.poll();
        				}
    				} else {
    					for(int i = 0; i < 10; i++) {
    						packetsQueue.poll();
    					}
    				}
    				timerUtil.reset();
    			}
    			break;
    	}
    }

}
