package dev.eternal.client.module.impl.exploit.disabler;

import dev.eternal.client.event.Subscribe;
import dev.eternal.client.Client;
import dev.eternal.client.event.events.EventIgnoredPacket;
import dev.eternal.client.event.events.EventPacket;
import dev.eternal.client.event.events.EventUpdate;
import dev.eternal.client.module.interfaces.IToggleable;
import dev.eternal.client.property.impl.mode.Mode;
import dev.eternal.client.util.network.PacketUtil;
import dev.eternal.client.util.time.Stopwatch;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CopyOnWriteArrayList;

public class WatchdogMode extends Mode {

  private final ConcurrentLinkedQueue<Packet<?>> packetQueue = new ConcurrentLinkedQueue<>();
  private final ConcurrentLinkedQueue<Packet<?>> moveQueue = new ConcurrentLinkedQueue<>();

  private final Stopwatch stopwatch = new Stopwatch();

  public WatchdogMode(IToggleable owner, String name) {
    super(owner, name);
  }

  @Subscribe
  public void handleUpdate(EventIgnoredPacket eventIgnoredPacket) {
    if (eventIgnoredPacket.getPacket() instanceof C03PacketPlayer pp) {
      eventIgnoredPacket.cancelled(true);
      moveQueue.add(eventIgnoredPacket.getPacket());
      if (stopwatch.hasElapsed(120)) {
        while (moveQueue.size() > 0) {
          PacketUtil.sendNoEvent(moveQueue.poll());
        }
        stopwatch.reset();
      }
      if (packetQueue.size() > 2) {
        while (packetQueue.size() > 0) {
          PacketUtil.sendSilent(packetQueue.poll());
        }
      }
    }
  }

  @Subscribe
  public void handlePacket(EventPacket eventPacket) {
    if (mc.thePlayer != null && mc.thePlayer.ticksExisted <= 1) {
      //clean this later
      packetQueue.clear();
      return;
    }

    if (eventPacket.getPacket() instanceof C0FPacketConfirmTransaction tx) {
      eventPacket.cancelled(true);
      packetQueue.add(eventPacket.getPacket());
    }
  }
}
