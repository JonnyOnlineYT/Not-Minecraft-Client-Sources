package dev.eternal.client.module.impl.exploit;

import dev.eternal.client.event.Subscribe;;
import dev.eternal.client.event.events.EventMove;
import dev.eternal.client.event.events.EventPacket;
import dev.eternal.client.event.events.EventRender3D;
import dev.eternal.client.event.events.EventUpdate;
import dev.eternal.client.module.Module;
import dev.eternal.client.module.api.ModuleInfo;
import dev.eternal.client.util.combat.CombatUtil;
import dev.eternal.client.util.movement.data.Rotation;
import dev.eternal.client.util.pathfinder.Node;
import dev.eternal.client.util.pathfinder.PathInfo;
import dev.eternal.client.util.player.BlockUtil;
import dev.eternal.client.util.player.RotationUtil;
import dev.eternal.client.util.render.RenderUtil;
import dev.eternal.client.util.time.Stopwatch;

import java.util.concurrent.ExecutorService;

import net.minecraft.block.Block;
import net.minecraft.block.BlockCarrot;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.Vec3;
import org.lwjgl.opengl.GL11;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

@ModuleInfo(name = "AutoPlanter", description = "niggerton Of.", category = Module.Category.EXPLOIT)
public class AutoPlanter extends Module {
  private final Stopwatch stopwatch = new Stopwatch();
  private BlockPos target;
  private boolean processed;
  private PathInfo currentPath;
  private final List<PathInfo> pathList = new CopyOnWriteArrayList<>();
  private final List<BlockPos> blockList = new CopyOnWriteArrayList<>();
  private final List<BlockPos> blackList = new CopyOnWriteArrayList<>();

  public AutoPlanter() {
    if (isEnabled()) toggle();
  }

  @Override
  public void onEnable() {
    blockList.clear();
    processed = false;
    new Thread(
        () -> {
          var val = 5;
          for (int i = (int) mc.thePlayer.posY + 2; i > mc.thePlayer.posY - 2; i--) {
            for (int j = (int) mc.thePlayer.posX - val; j < mc.thePlayer.posX + val; j++) {
              for (int k = (int) mc.thePlayer.posZ - val; k < mc.thePlayer.posZ + val; k++) {
                blockList.add(new BlockPos(j, i, k));
              }
            }
          }
          blockList.forEach(pos -> {
            Block block = mc.theWorld.getBlockState(pos).getBlock();
            BlockPos newBlockPos = new BlockPos(pos.getX(), pos.getY() + 1, pos.getZ());
            Block newBlock = mc.theWorld.getBlockState(newBlockPos).getBlock();
            if (!(block == Blocks.farmland))
              blockList.remove(pos);
            else if (newBlock == Blocks.carrots || newBlock == Blocks.wheat || newBlock == Blocks.potatoes)
              blockList.remove(pos);
          });
          processed = true;
        })
        .start();
  }

  @Override
  protected void onDisable() {
  }

  @Subscribe
  public void onUpdate(EventUpdate eventUpdate) {
    if (mc.thePlayer.getHeldItem().getItem() == Items.nether_star)
      return;
    for (BlockPos blockPos : blockList) {
      if (stopwatch.hasElapsed(5)) {
        mc.thePlayer.motionY = 0;
        mc.thePlayer.setPosition(blockPos.getX() + 0.5, blockPos.getY() + 1, blockPos.getZ() + 0.5);
        stopwatch.reset();
        blockList.remove(blockPos);
        mc.playerController.onPlayerRightClick(mc.thePlayer, mc.theWorld, mc.thePlayer.getHeldItem(), new BlockPos(blockPos.getX(), blockPos.getY() + 1, blockPos.getZ()), EnumFacing.DOWN, new Vec3(blockPos.getX(), blockPos.getY() + 1, blockPos.getZ()));
        toggle();
        toggle();
      }
    }
  }

  @Subscribe
  public void render3D(EventRender3D eventRender3D) {
    if (currentPath == null) return;
    RenderUtil.pre3D();
    GlStateManager.disableTexture2D();
    GlStateManager.translate(
        -RenderManager.renderPosX, -RenderManager.renderPosY, -RenderManager.renderPosZ);
    for (PathInfo pathInfo : pathList) {
      GL11.glLineWidth(5);
      GL11.glColor4f(0.0F, 0.0F, 0.0F, 1.0F);
      GL11.glBegin(GL11.GL_LINE_STRIP);
      for (Node node : pathInfo.pathList()) {
        final BlockPos bp = node.blockPos();
        GL11.glVertex3d(bp.getX() + 0.5, bp.getY(), bp.getZ() + 0.5);
      }
      GL11.glEnd();

      GL11.glLineWidth(3);
      GL11.glBegin(3);
      for (Node node : pathInfo.pathList()) {
        final BlockPos bp = node.blockPos();
        GL11.glVertex3d(bp.getX() + 0.5, bp.getY(), bp.getZ() + 0.5);
      }
      GL11.glEnd();
    }
    RenderUtil.post3D();
  }

  @Subscribe
  public void onPacket(EventPacket eventPacket) {
    if (eventPacket.getPacket() instanceof S08PacketPlayerPosLook) {
      toggle();
      toggle();
    }
  }

  private void breakBlock(BlockPos blockPos) {
    mc.thePlayer.sendQueue.addToSendQueue(
        new C07PacketPlayerDigging(
            C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, blockPos, EnumFacing.NORTH));
    mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(
        C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, blockPos, EnumFacing.NORTH));
  }
}
