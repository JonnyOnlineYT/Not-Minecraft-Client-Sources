package dev.eternal.client.module.impl.exploit.disabler;

import dev.eternal.client.event.Subscribe;
import dev.eternal.client.event.events.EventPacket;
import dev.eternal.client.event.events.EventUpdate;
import dev.eternal.client.module.interfaces.IToggleable;
import dev.eternal.client.property.impl.NumberSetting;
import dev.eternal.client.property.impl.mode.Mode;
import dev.eternal.client.util.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

import java.util.Deque;
import java.util.concurrent.ConcurrentLinkedDeque;

;

public class TransactionPollMode extends Mode {

  private final NumberSetting delaySetting = new NumberSetting(this, "Delay (Ticks)", 180, 4, 180, 1);
  private final NumberSetting packetThreshold = new NumberSetting(this, "Threshold (Packets)", 20, 4, 180, 1);

  private final Deque<Packet<?>> packetDeque = new ConcurrentLinkedDeque<>();
  private int currentTicks;

  public TransactionPollMode(IToggleable owner, String name) {
    super(owner, name);
  }

  @Subscribe
  public void handlePacket(EventPacket eventPacket) {
    if (mc.thePlayer != null && mc.thePlayer.ticksExisted <= 10) {
      currentTicks = 0;
      packetDeque.clear();
      return;
    }
    if (eventPacket.getPacket() instanceof C0FPacketConfirmTransaction) {
      eventPacket.cancelled(true);
      packetDeque.add(eventPacket.getPacket());
    }
  }

  @Subscribe
  public void handleUpdate(EventUpdate eventUpdate) {
    if (eventUpdate.pre())
      return;
    if (mc.thePlayer.ticksExisted % 2 == 0)
      PacketUtil.sendSilent(new C0CPacketInput());
    if (currentTicks >= delaySetting.value().intValue()) {
      while (packetDeque.size() > 1)
        PacketUtil.sendSilent(packetDeque.poll());
      currentTicks = 0;
    } else currentTicks++;
  }

  @Override
  public void onEnable() {
    packetDeque.clear();
  }

}
