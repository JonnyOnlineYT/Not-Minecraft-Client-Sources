package dev.eternal.client.module.impl.exploit.disabler;

import dev.eternal.client.event.Subscribe;
import dev.eternal.client.event.events.EventIgnoredPacket;
import dev.eternal.client.event.events.EventPacket;
import dev.eternal.client.event.events.EventUpdate;
import dev.eternal.client.module.interfaces.IToggleable;
import dev.eternal.client.property.impl.NumberSetting;
import dev.eternal.client.property.impl.mode.Mode;
import dev.eternal.client.util.network.PacketUtil;
import dev.eternal.client.util.time.Stopwatch;
import net.minecraft.network.Packet;
import org.apache.commons.lang3.RandomUtils;

import java.util.ArrayList;
import java.util.List;

public class PulseMode extends Mode {

  private final NumberSetting delayTicks = new NumberSetting(this, "Delay (Ticks)", 2, 1, 5, 1);

  private final List<Packet<?>> packets = new ArrayList<>();
  private final Stopwatch stopwatch = new Stopwatch();

  public PulseMode(IToggleable toggleable, String name) {
    super(toggleable, name);
  }

  @Override
  public void onEnable() {
    packets.clear();
    stopwatch.reset();
  }

  @Override
  public void onDisable() {
    packets.forEach(PacketUtil::sendNoEvent);
    packets.clear();
    stopwatch.reset();
  }

  @Subscribe
  public void onUpdate(EventUpdate eventUpdate) {
    if (eventUpdate.pre()) {
      if (stopwatch.hasElapsed(this.delayTicks.value().longValue() * 50L)) {
        packets.forEach(PacketUtil::sendNoEvent);
        packets.clear();
        stopwatch.reset();
      }
    }
  }

  @Subscribe
  public void handlePacket(EventIgnoredPacket eventIgnoredPacket) {
    if (eventIgnoredPacket.direction() == EventPacket.Direction.OUT) {
      eventIgnoredPacket.cancelled(true);
      packets.add(eventIgnoredPacket.getPacket());
    }
  }
}
