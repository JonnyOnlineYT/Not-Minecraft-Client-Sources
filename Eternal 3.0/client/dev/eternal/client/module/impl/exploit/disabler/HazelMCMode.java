package dev.eternal.client.module.impl.exploit.disabler;

import dev.eternal.client.event.Subscribe;;
import dev.eternal.client.event.events.EventPacket;
import dev.eternal.client.event.events.EventTeleport;
import dev.eternal.client.event.events.EventUpdate;
import dev.eternal.client.module.interfaces.IToggleable;
import dev.eternal.client.property.impl.mode.Mode;
import dev.eternal.client.util.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class HazelMCMode extends Mode {

  private final Queue<Packet<?>> concurrentLinkedQueue = new ConcurrentLinkedQueue<>();
  private boolean handleTeleport;

  public HazelMCMode(IToggleable owner, String name) {
    super(owner, name);
  }

  @Subscribe
  public void handleTeleport(EventTeleport eventTeleport) {
    if (mc.thePlayer.ticksExisted > 5 && !mc.thePlayer.isInWeb && handleTeleport) {
      eventTeleport.handleSilently(10);
      handleTeleport = false;
    }
  }

  @Subscribe
  public void handlePacket(EventPacket eventPacket) {
    if (mc.thePlayer != null && mc.thePlayer.ticksExisted <= 3) {
      concurrentLinkedQueue.clear();
      return;
    }
    Packet<?> packet = eventPacket.getPacket();
    if (packet instanceof C0FPacketConfirmTransaction) {
      this.concurrentLinkedQueue.add(packet);
      eventPacket.cancelled(true);
    }

    if (packet instanceof C03PacketPlayer packetPlayer) {
      if (mc.thePlayer.ticksExisted % 25 == 0) {
        Packet<?> packetPlayerPosLook = new C03PacketPlayer.C04PacketPlayerPosition(-1, -100, -1, true);
        eventPacket.packet(packetPlayerPosLook);
        handleTeleport = true;
      }
    }
  }

  @Subscribe
  public void handleUpdate(EventUpdate nigger) {
    if (nigger.pre()) {
      if (mc.thePlayer.ticksExisted % 33 == 0) {
        if (!this.concurrentLinkedQueue.isEmpty()) {
          Packet<?> packet = this.concurrentLinkedQueue.poll();
          PacketUtil.sendSilent(packet);
        }
      }
    }
  }
}
