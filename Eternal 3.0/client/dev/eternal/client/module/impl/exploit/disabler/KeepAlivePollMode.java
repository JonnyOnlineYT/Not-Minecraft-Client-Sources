package dev.eternal.client.module.impl.exploit.disabler;

import dev.eternal.client.event.Subscribe;;
import dev.eternal.client.event.events.EventPacket;
import dev.eternal.client.event.events.EventUpdate;
import dev.eternal.client.module.interfaces.IToggleable;
import dev.eternal.client.property.impl.NumberSetting;
import dev.eternal.client.property.impl.mode.Mode;
import dev.eternal.client.util.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;

import java.util.Deque;
import java.util.concurrent.ConcurrentLinkedDeque;

public class KeepAlivePollMode extends Mode {

  private final NumberSetting delaySetting = new NumberSetting(this, "Delay (Ticks)", 10, 4, 40, 1);
  private final Deque<Packet<?>> packetDeque = new ConcurrentLinkedDeque<>();
  private int currentTicks;

  public KeepAlivePollMode(IToggleable owner, String name) {
    super(owner, name);
  }

  @Subscribe
  public void handleTransaction(EventPacket eventPacket) {
    if (mc.thePlayer.ticksExisted == 0) {
      packetDeque.clear();
      return;
    }
    if (eventPacket.getPacket() instanceof C00PacketKeepAlive) {
      C00PacketKeepAlive packetKeepAlive = eventPacket.getPacket();
      packetDeque.add(packetKeepAlive);
      eventPacket.cancelled(true);
    }
  }

  @Subscribe
  public void handleUpdate(EventUpdate eventUpdate) {
    if (currentTicks >= delaySetting.value().intValue() && !packetDeque.isEmpty()) {
      PacketUtil.sendSilent(packetDeque.poll());
      currentTicks = 0;
    } else currentTicks++;
  }

  @Override
  public void onEnable() {
    packetDeque.clear();
  }
}
