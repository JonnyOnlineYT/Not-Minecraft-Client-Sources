package dev.eternal.client.module.impl.exploit.disabler;

import dev.eternal.client.event.Subscribe;;
import dev.eternal.client.event.events.EventPacket;
import dev.eternal.client.event.events.EventUpdate;
import dev.eternal.client.module.interfaces.IToggleable;
import dev.eternal.client.property.impl.mode.Mode;
import dev.eternal.client.util.network.PacketUtil;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

import java.util.Collection;
import java.util.concurrent.CopyOnWriteArrayList;

public class TransactionOffsetMode extends Mode {
  public TransactionOffsetMode(IToggleable owner, String name) {
    super(owner, name);
  }

  private final Collection<DelayedPacket> packetCollection = new CopyOnWriteArrayList<>();

  @Subscribe
  public void handlePacket(EventPacket eventPacket) {
    if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0) {
      packetCollection.clear();
      return;
    }
    if (eventPacket.getPacket() instanceof C0FPacketConfirmTransaction) {
      packetCollection.add(new DelayedPacket(eventPacket.getPacket(), 350L));
      eventPacket.cancelled(true);
    }
  }

  @Subscribe
  public void handleUpdate(EventUpdate eventUpdate) {
    if (eventUpdate.pre()) {
      long currentTime = System.currentTimeMillis();
      for (DelayedPacket delayedPacket : packetCollection) {
        long created = delayedPacket.created();
        long delay = delayedPacket.delay();
        Packet<?> packet = delayedPacket.packet();
        if (currentTime >= created + delay) {
          PacketUtil.sendSilent(packet);
          packetCollection.remove(delayedPacket);
        }
      }
    }
  }

  @Getter
  @RequiredArgsConstructor
  private static class DelayedPacket {
    private final long created = System.currentTimeMillis();
    private final Packet<?> packet;
    private final long delay;
  }

}
