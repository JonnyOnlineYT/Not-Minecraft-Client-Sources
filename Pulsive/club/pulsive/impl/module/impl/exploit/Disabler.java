package club.pulsive.impl.module.impl.exploit;

import club.pulsive.api.event.eventBus.handler.EventHandler;
import club.pulsive.api.event.eventBus.handler.Listener;
import club.pulsive.api.main.Pulsive;
import club.pulsive.impl.event.network.PacketEvent;
import club.pulsive.impl.event.player.PlayerMotionEvent;
import club.pulsive.impl.event.player.PlayerMoveEvent;
import club.pulsive.impl.event.player.PlayerTeleportEvent;
import club.pulsive.impl.event.player.WorldLoadEvent;
import club.pulsive.impl.module.Category;
import club.pulsive.impl.module.Module;
import club.pulsive.impl.module.ModuleInfo;
import club.pulsive.impl.module.impl.movement.Flight;
import club.pulsive.impl.module.impl.movement.Speed;
import club.pulsive.impl.module.impl.player.Scaffold;
import club.pulsive.impl.property.implementations.DoubleProperty;
import club.pulsive.impl.property.implementations.EnumProperty;
import club.pulsive.impl.property.implementations.MultiSelectEnumProperty;
import club.pulsive.impl.util.client.Logger;
import club.pulsive.impl.util.client.TimerUtil;
import club.pulsive.impl.util.math.MathUtil;
import club.pulsive.impl.util.math.apache.ApacheMath;
import club.pulsive.impl.util.network.BalanceUtil;
import club.pulsive.impl.util.network.PacketUtil;
import club.pulsive.impl.util.player.DisablerUtility;
import club.pulsive.impl.util.player.InventoryUtils;
import club.pulsive.impl.util.player.MovementUtil;
import club.pulsive.impl.util.player.PlayerUtil;
import com.google.common.collect.Lists;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import lombok.AllArgsConstructor;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.util.EnumFacing;
import org.apache.commons.lang3.RandomUtils;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ThreadLocalRandom;

@ModuleInfo(name = "Disabler", renderName = "Disabler", description = "Disables the exploit", category = Category.EXPLOIT)
public class Disabler extends Module {

    private final Deque<Packet> transactionQueue = new ArrayDeque<>(), movementPackets = new ArrayDeque<>();
    private final TimerUtil timer = new TimerUtil(), stop = new TimerUtil();
    private final DisablerUtility disablerUtility = new DisablerUtility();
    private long lastLagBackTime;
    private int ticks, vulTickCounterUID;
    private double x, y, z;
    
    private EnumProperty<MODES> mode = new EnumProperty<>("Mode", MODES.WATCHDOG);
    private final EnumProperty<TimerMode> timerModeEnumProperty = new EnumProperty<TimerMode>("Timer Mode", TimerMode.BALANCE, () -> mode.getValue() == MODES.WATCHDOG);
    
    private MultiSelectEnumProperty<WATCHDOGCUSTOMADDONS> hypixelCustomShit = new MultiSelectEnumProperty<WATCHDOGCUSTOMADDONS>("Hypixel Custom Shit",
            Lists.newArrayList(WATCHDOGCUSTOMADDONS.DELAY_MOVEMENT), WATCHDOGCUSTOMADDONS.values(), () -> mode.getValue() == MODES.WATCHDOGCUSTOM);
    private DoubleProperty minTicks = new DoubleProperty("Min Ticks", 5, 1, 100, 1, () -> mode.getValue() == MODES.WATCHDOGCUSTOM);
    private DoubleProperty maxTicks = new DoubleProperty("Max Ticks", 20, 1, 100, 1, () -> mode.getValue() == MODES.WATCHDOGCUSTOM);
    public boolean stopCombatCheck;
    @Override
    public void onEnable() {
        super.onEnable();
        stopCombatCheck = false;
        x = mc.thePlayer.posX;
        y = mc.thePlayer.posY;
        z = mc.thePlayer.posZ;
        timer.reset();
        transactionQueue.clear();
        stop.reset();
        lastLagBackTime = 0;
        ticks = 0;
    }
    
    
    @Override
    public void init() {
        this.addValueChangeListener(this.mode);
        super.init();
    }

    @EventHandler
    private final Listener<WorldLoadEvent> worldLoadEventListener = event -> {
        lastLagBackTime = 0;
        ticks = 0;
        movementPackets.clear();
        transactionQueue.clear();
        stopCombatCheck = false;
        stop.reset();
        timer.reset();
    };

    @EventHandler
    private final Listener<PlayerMoveEvent> playerMoveEventListener = event -> {
        if(mode.getValue() == MODES.AAC_5_2_0){
//            if (System.currentTimeMillis() - lastLagBackTime > 450) {
//                mc.timer.timerSpeed = 1.0F;
//            } else {
//                mc.timer.timerSpeed = 0.1f;
//                PacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, 1.0E159, mc.thePlayer.posZ, false));
//                PacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
//                MovementUtil.setSpeed(event, 0);
//                event.setY(.3);
//            }
            PacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, 1.0E159, mc.thePlayer.posZ, false));
            PacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
        }
    };
    
    @EventHandler
    private final Listener<PlayerMotionEvent> playerMotionEventListener = event -> {
        switch (mode.getValue()){
            case WATCHDOGCUSTOM:{
                if (event.isPost() && !movementPackets.isEmpty()) {
                    if (!hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.DELAY_MOVEMENT) || System.currentTimeMillis() - lastLagBackTime < 100 || movementPackets.size() > 3) {
                        for (Packet<?> packet : movementPackets) mc.thePlayer.sendQueue.addToSendQueue(packet);
                        movementPackets.clear();
                        return;
                    }
                    //get the packet to avoid having to use addToSendQueueNoEvent
                    PacketUtil.sendPacketNoEvent(movementPackets.removeLast());
                }
                break;
            }
            case GHOSTLY:{
                if(event.isPre()){
                    if(mc.thePlayer.ticksExisted % 180 == 0){
                        while(transactionQueue.size() > 20)
                            PacketUtil.sendPacketNoEvent(transactionQueue.removeLast());
                    }
                }
                break;
            }
            case PULSIVEHVH:{
                if(event.isUpdate()){
                    if (timer.hasElapsed(300)) {
                        while (!transactionQueue.isEmpty()) {
                            final Packet<?> packet = transactionQueue.poll();
                            PacketUtil.sendPacketNoEvent(packet);
                        }
                        timer.reset();
                    }
                }
                break;
            }
            case WATCHDOG:{
                if(timerModeEnumProperty.getValue() == TimerMode.BALANCE && Pulsive.INSTANCE.getModuleManager().getModule(Flight.class).isToggled()){
                    PacketUtil.sendPacketNoEvent(new C0EPacketClickWindow());
                }
              //  InventoryUtils.windowClick(mc, RandomUtils.nextInt(9, 18), 0, mc.thePlayer.ticksExisted % 2 == 0 ? InventoryUtils.ClickType.SHIFT_CLICK : InventoryUtils.ClickType.SWAP_WITH_HOT_BAR_SLOT);
                if(timerModeEnumProperty.getValue() == TimerMode.BALANCE){
                    stopCombatCheck = true;
                }
                if(event.isPre()){
                    if(mc.thePlayer.ticksExisted == 121){
                        Logger.print("Strafe go bye bye");
                        //mc.thePlayer.setPosition(mc.thePlayer.posX + 1, mc.thePlayer.posY, mc.thePlayer.posZ + 1);
                    }
                }
                if(event.isPre() && timerModeEnumProperty.getValue() == TimerMode.PACKET){
                    while (transactionQueue.isEmpty() || mc.thePlayer.ticksExisted < 5){
                        stopCombatCheck = false;
                        timer.reset();
                        return;
                    }

                    if(timer.hasElapsed(120)){
                        while(!transactionQueue.isEmpty()) {
                            PacketUtil.sendPacketNoEvent(transactionQueue.removeLast());
                            timer.reset();
                        }
                        //timer.reset();
                        stopCombatCheck = true;
                    }else{
                        stopCombatCheck = false;
                    }
                }
                break;
            }
            case VULCANCOMBAT:{

//                if(event.isPre() && mc.thePlayer.ticksExisted % 4 == 0) {
//                    PacketUtil.sendPacketNoEvent(new C0APacketAnimation());
//                    PacketUtil.sendPacketNoEvent(new C02PacketUseEntity(C02PacketUseEntity.Action.ATTACK));
//                }

                if(event.isPre() && Pulsive.INSTANCE.getModuleManager().getModule(Scaffold.class).isToggled())
                    PacketUtil.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(null));

                if(timer.hasElapsed(5000) && transactionQueue.size() > 4){
                    timer.reset();
                    while (transactionQueue.size() > 4){
                        PacketUtil.sendPacketNoEvent(transactionQueue.poll());
                    }
                }
                break;
            }
            case MINEBOX:{
                if(event.isPre()){
                    if(timer.hasElapsed(900L)){
                        while(!transactionQueue.isEmpty()){
                            PacketUtil.sendPacketNoEvent(transactionQueue.poll());
                        }
                        timer.reset();
                    }
                }
                break;
            }
            case TICKSEXISTED:{
                event.setCancelled(true);
                break;
            }
        }
    };
    
    @EventHandler
    private final Listener<PacketEvent> packetEventListener = event -> {
        if(mode.getValue() == MODES.ROTATION_DESYNC){
            if(event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive || event.getPacket() instanceof S12PacketEntityVelocity)
                event.setCancelled(true);

            if(event.getPacket() instanceof C0BPacketEntityAction){
                C0BPacketEntityAction c0b = event.getPacket();
                if(c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING)
                    event.setCancelled(true);
            }
        }

      switch(event.getEventState()) {
          case SENDING: {
              switch(mode.getValue()) {
                  case TICKSEXISTED:{
                      if(event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook){
                          C03PacketPlayer.C06PacketPlayerPosLook c06 = event.getPacket();
                          PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(c06.x, 1e159, c06.z, c06.isOnGround()));
                         // PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(c06.x, 1e-159, c06.z, c06.isOnGround()));
                          // PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(c06.x, 1e159 + MathUtil.randomFloat(999, 9999999), c06.z, true));
                      }
                    // PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(RandomUtils.nextFloat(-9999, 9999), mc.thePlayer.posY + 1e159, RandomUtils.nextFloat(-9999, 9999), mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
                      break;
                  }
                  case VULCANCOMBAT:{
                      if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                          transactionQueue.add(event.getPacket());
                          event.setCancelled(true);
                      }

                      if(event.getPacket() instanceof C0BPacketEntityAction){
                          C0BPacketEntityAction c0b = event.getPacket();
                          if(c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING || c0b.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING)
                              event.setCancelled(true);
                      }
                      break;
                  }
                  case MATRIX:{

                      if(event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive){
                          event.setCancelled(true);

                          if(stop.hasElapsed(3520L)){
                              for(int i = 0; i < 2; i++){
                                  PacketUtil.sendPacketNoEvent(event.getPacket());
                                  PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                              }
                              timer.reset();
                          }
                      }

                      if(event.getPacket() instanceof C03PacketPlayer){
                          PacketUtil.sendPacketNoEvent(new C0CPacketInput(0.98F, 0.98F, false, false));
                          C03PacketPlayer c03 = event.getPacket();
                          double x = mc.thePlayer.posX;
                          double y = mc.thePlayer.posY;
                          double z = mc.thePlayer.posZ;
                          float yaw = mc.thePlayer.rotationYaw;
                          float pitch = mc.thePlayer.rotationPitch;

                          if(c03.isMoving()){
                              x = c03.x;
                              y = c03.y;
                              z = c03.z;
                          }

                          if(c03.getRotating()){
                              yaw = c03.getYaw();
                              pitch = c03.getPitch();
                          }

                         // PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C05PacketPlayerLook(Integer.MIN_VALUE, Integer.MAX_VALUE, true));
                          Integer integer = PlayerUtil.findItem(null);
                          PacketUtil.sendPacketNoEvent(new C09PacketHeldItemChange(integer));
                          PacketUtil.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(mc.thePlayer.getPosition().down(), EnumFacing.UP.getIndex(), mc.thePlayer.getHeldItem(), 1e-17F, MathUtil.randomFloat(Float.MIN_VALUE, Float.MAX_VALUE), 1e-19F));
                          PacketUtil.sendPacketNoEvent(new C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem));
                          event.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, c03.isOnGround()));
                      }
                      break;
                  }
                  case GHOSTLY:{
                      if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                          event.setCancelled(true);
                          transactionQueue.add(event.getPacket());
                      }
//
//                      if (event.getPacket() instanceof C03PacketPlayer) {
//                          PacketUtil.sendPacketNoEvent(new C0CPacketInput());
//                      }
//                      if(event.getPacket() instanceof C0BPacketEntityAction){
//                          C0BPacketEntityAction c0b = event.getPacket();
//                          if(c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING)
//                              event.setCancelled(true);
//                      }
                      break;
                  }
                  case WATCHDOG_117:{
                      if(event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook){
                          C03PacketPlayer.C06PacketPlayerPosLook c06 = event.getPacket();
                          event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(c06.x, c06.y, c06.z, c06.isOnGround()));
                      }
                      break;
                  }
                  case MINEBOX: {
                      if(event.getPacket() instanceof C00PacketKeepAlive || (event.getPacket() instanceof C0FPacketConfirmTransaction && mc.thePlayer.ticksExisted % 3 == 0)){
                          event.setCancelled(true);
                          transactionQueue.add(event.getPacket());
                      }

                      if(event.getPacket() instanceof C0BPacketEntityAction){
                          C0BPacketEntityAction c0b = event.getPacket();
                          if(c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING)
                              event.setCancelled(true);
                      }
                      break;
                  }
                  case WATCHDOGCUSTOM:{
                          if(BalanceUtil.INSTANCE.getBalance() > 0) {
                              mc.timer.timerSpeed = 1F;
                          }
                          disablerUtility.doInvMove(event);
                      if (mc.thePlayer.ticksExisted < 2) ticks = MathUtil.randomInt(minTicks.getValue().intValue(), maxTicks.getValue().intValue());
                      if (event.getPacket() instanceof C03PacketPlayer && mc.thePlayer.ticksExisted <= ticks) {
                          final C03PacketPlayer c03 = event.getPacket();
                          c03.y += MathUtil.randomDouble(-MathUtil.randomDouble(1, 300), MathUtil.randomDouble(1, 300));
                          c03.x += MathUtil.randomDouble(-MathUtil.randomDouble(1, 300), MathUtil.randomDouble(1, 300));
                          c03.z += MathUtil.randomDouble(-MathUtil.randomDouble(1, 300), MathUtil.randomDouble(1, 300));
                          if (hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.EXTRA_RANDOM)) {
                              c03.setYaw(MathUtil.randomFloat(-180, 180));
                              c03.setPitch(MathUtil.randomFloat(-90, 90));
                              c03.setOnGround(ThreadLocalRandom.current().nextBoolean());
                          }
                      }
                      if (event.getPacket() instanceof C03PacketPlayer && mc.thePlayer.ticksExisted > ticks) {
                          final C03PacketPlayer c03 = event.getPacket();
                          final boolean c03Correct = (c03.x == 0. && c03.y == 0. && c03.z == 0.) ||
                                  (c03.x == mc.thePlayer.posX && c03.y == mc.thePlayer.posY && c03.z == mc.thePlayer.posZ);
                          final boolean jumping = mc.thePlayer.onGround && mc.thePlayer.motionY > 0;
                          if (!c03.rotating && MathUtil.getDifference(mc.thePlayer.posX, mc.thePlayer.lastTickPosX) == 0. &&
                                  MathUtil.getDifference(mc.thePlayer.posY, mc.thePlayer.lastTickPosY) == 0. &&
                                  MathUtil.getDifference(mc.thePlayer.posZ, mc.thePlayer.lastTickPosZ) == 0. && c03Correct && !mc.playerController.getIsHittingBlock()
                                  & !jumping && mc.thePlayer.ticksExisted % 10 != 0) {
                              event.setCancelled(true);
                          }
                      }
                      if (mc.thePlayer != null && mc.thePlayer.ticksExisted > maxTicks.getValue() && mc.thePlayer.ticksExisted <= 120 && hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.TIMER)) {
                          event.setCancelled(true);
                          transactionQueue.add(event.getPacket());
                      }
                      if (event.getPacket() instanceof C03PacketPlayer && !event.isCancelled() && hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.DELAY_MOVEMENT) && !movementPackets.contains(event.getPacket())) {
                         //a;
                          event.setCancelled(true);
                          movementPackets.add(event.getPacket());
                      }
                      if (mc.thePlayer != null && mc.thePlayer.ticksExisted > 120 && hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.TIMER) && !transactionQueue.isEmpty()) {
                          for (Packet<?> packet1 : transactionQueue) {
                              PacketUtil.sendPacketNoEvent(packet1);
                          }
                          transactionQueue.clear();
                      }
                      if (event.getPacket() instanceof C00PacketKeepAlive && hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.DO_PING_MODIFICATIONS)) {
                          Logger.print("bbb");
                          final C00PacketKeepAlive c00 = event.getPacket();
                          event.setPacket(new C00PacketKeepAlive(c00.getKey() + MathUtil.randomInt(-MathUtil.randomInt(3, 200), MathUtil.randomInt(3, 200))));
                      }
                      if (event.getPacket() instanceof C0FPacketConfirmTransaction && hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.DO_PING_MODIFICATIONS) && hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.C0F_PING)) {
                          final C0FPacketConfirmTransaction c0F = event.getPacket();
                          event.setPacket(new C0FPacketConfirmTransaction(c0F.getWindowId(), c0F.getUid(), ThreadLocalRandom.current().nextBoolean()));
                      }
                      if (hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.FUNNY_MOVEMENT) && event.getPacket() instanceof C03PacketPlayer && !event.isCancelled()) {
                          final C03PacketPlayer c03 = event.getPacket();
                          final String channel0 = new String(MathUtil.randomBytes(3, 8, Byte.MIN_VALUE, Byte.MAX_VALUE)),
                                  channel0_1 = channel0.substring(0, MathUtil.randomInt(1, ApacheMath.min(8, channel0.length()))),
                                  channel1 = new String(MathUtil.randomBytes(3, 8, Byte.MIN_VALUE, Byte.MAX_VALUE));
                          final ByteBuf buffer = Unpooled.buffer().writeDouble(c03.x).writeDouble(c03.y).writeDouble(c03.z).writeFloat(c03.getYaw()).writeFloat(c03.getPitch());
                          mc.thePlayer.sendQueue.addToSendQueue(new C17PacketCustomPayload(channel0_1 + "|" + channel1,
                                  new PacketBuffer(buffer)));
                      }
                      if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook && System.currentTimeMillis() - lastLagBackTime < 75 && mc.thePlayer.ticksExisted <= ticks) {
                          final C03PacketPlayer.C06PacketPlayerPosLook c06 = event.getPacket();
                          event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(c06.x, c06.y, c06.z, c06.isOnGround()));
                      }

                      if (!event.isCancelled() && event.getPacket() instanceof C03PacketPlayer && hypixelCustomShit.isSelected(WATCHDOGCUSTOMADDONS.FUNNY_MOVEMENT)) {
                          final C03PacketPlayer c03 = event.getPacket();
                          c03.x += MovementUtil.getRandomHypixelValues() * (mc.thePlayer.ticksExisted % 2 == 0 ? 1 : -1);
                          c03.z += MovementUtil.getRandomHypixelValues() * (mc.thePlayer.ticksExisted % 2 == 0 ? 1 : -1);
                      }
                      break;
                  } 
                  case VERUS: {
                      switch(event.getEventState()) {
                          case SENDING:
                              if(timer.hasElapsed(490)) {
                                  for (Packet movementPacket : movementPackets) {
                                      PacketUtil.sendPacketNoEvent(movementPacket);
                                      movementPackets.remove(movementPacket);
                                  }
                                  timer.reset();
                              }
                              if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
                                  movementPackets.add(event.getPacket());
                                  event.setCancelled(true);
                              }
                              if(event.getPacket() instanceof C03PacketPlayer) {
                                  C03PacketPlayer packet = event.getPacket();
                                  if(mc.thePlayer.ticksExisted % 50 == 0) {
                                      packet.setOnGround(true);
                                      packet.setY(-1);
                                  }
                              }
                              break;
                      }
                      break;
                  }
                  case WATCHDOG:{
                      if(mc.timer.timerSpeed > 1.0f && BalanceUtil.INSTANCE.getBalance() > -500)
                          mc.timer.timerSpeed = 1.0f;

                      if(event.getPacket() instanceof C03PacketPlayer) {
                          C03PacketPlayer c03 = event.getPacket();
                          Scaffold scaffold = Pulsive.INSTANCE.getModuleManager().getModule(Scaffold.class);
                          if (timerModeEnumProperty.getValue() == TimerMode.PACKET) {
//                              event.setCancelled(true);
//                              transactionQueue.push(event.getPacket());
                          } else {
                              if ((!c03.isMoving() && !mc.thePlayer.isUsingItem()) || mc.thePlayer.ticksExisted < 120) {
                                  event.setCancelled(true);
                              }
                          }
                      }

                      if((event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) && timerModeEnumProperty.getValue() == TimerMode.PACKET){
                          event.setCancelled(true);
                          transactionQueue.push(event.getPacket());
                      }

//                      if(event.getPacket() instanceof C08PacketPlayerBlockPlacement){
//                          Scaffold scaffold = Pulsive.INSTANCE.getModuleManager().getModule(Scaffold.class);
//                          if(scaffold.isToggled()){
//                              event.setCancelled(true);
//                              transactionQueue.add(event.getPacket());
//                          }
//                      }

//                      if(event.getPacket() instanceof C0BPacketEntityAction){
//                          C0BPacketEntityAction c0b = event.getPacket();
//                          if(c0b.getAction() == C0BPacketEntityAction.Action.START_SPRINTING) event.setCancelled(true);
//                      }
                      break;
                  }
              }
              break;
          }
          case RECEIVING:{
              switch(mode.getValue()){
                  case TICKSEXISTED:{
                      if(event.getPacket() instanceof S08PacketPlayerPosLook && mc.getNetHandler().doneLoadingTerrain){
                          S08PacketPlayerPosLook s08 = event.getPacket();
                          event.setCancelled(true);
                          PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), true));
                      }
                      break;
                  }
                  case WATCHDOG:{
//                      if(event.getPacket() instanceof S32PacketConfirmTransaction && !stopCombatCheck){
//                          Logger.print("Strafe Checks Disabled");
//                          stopCombatCheck = true;
//                      }
                      if(event.getPacket() instanceof S08PacketPlayerPosLook){
                          Logger.print("eee");
                      }
                      break;
                  }
                  case MINEBOX:{
                      if(event.getPacket() instanceof S00PacketKeepAlive)
                          event.setCancelled(true);
                      break;
                  }
                  case ROTATION_DESYNC:{
                      if(event.getPacket() instanceof S08PacketPlayerPosLook && (Pulsive.INSTANCE.getModuleManager().getModule(Flight.class).isToggled()
                              || Pulsive.INSTANCE.getModuleManager().getModule(Speed.class).isToggled())) {
                          S08PacketPlayerPosLook s08 = event.getPacket();
                          event.setCancelled(true);
                          Logger.print("yes");
                          PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), true));
                          if (mc.thePlayer.posX != s08.getX() && mc.thePlayer.posY != s08.getY() && mc.thePlayer.posZ != s08.getZ()) {
                              mc.thePlayer.setPosition(s08.getX(), s08.getY(), s08.getZ());
                          }
                      }
                      break;
                  }
                  case PULSIVEHVH:{
                      if(event.getPacket() instanceof S08PacketPlayerPosLook){
                          S08PacketPlayerPosLook s08 = event.getPacket();
                          if(mc.thePlayer.getDistance(s08.getX(), s08.getY(), s08.getZ()) <= 8){
                              event.setCancelled(true);
                              PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), true));
//                              if (mc.thePlayer.posX != s08.getX() && mc.thePlayer.posY != s08.getY() && mc.thePlayer.posZ != s08.getZ()) {
//                                  mc.thePlayer.setPosition(s08.getX(), s08.getY(), s08.getZ());
//                              }
                          }
                      }
                      break;
                  }
                  case AAC_5_2_0:{
                      if(event.getPacket() instanceof S08PacketPlayerPosLook)
                          lastLagBackTime = System.currentTimeMillis();
                      break;
                  }
              }
              break;
          }
      }
    };

    @AllArgsConstructor
    private enum MODES {
        WATCHDOG("Watchdog"),
        VERUS("Verus"),
        EXPERIMENTAL("Experimental"),
        WATCHDOGCUSTOM("Watchdog Custom"),
        ROTATION_DESYNC("Rotation Desync"),
        PULSIVEHVH("PulsiveHvH"),
        MINEBOX("Minebox"),
        GHOSTLY("Ghostly"),
        VULCANCOMBAT("Vulcan Combat"),
        TICKSEXISTED("Dont Use"),
        MATRIX("Shitty Anticheat"),
        WATCHDOG_117("Watchdog 1.17"),
        AAC_5_2_0("AAC v5.2.0");

        private final String modeName;

        @Override
        public String toString() {return modeName;}
    }

    @AllArgsConstructor
    private enum TimerMode {
        PACKET("Packet"),
        BALANCE("Balance");

        private final String modeName;

        @Override
        public String toString() {return modeName;}
    }

    public boolean isHyp(){
        return mode.getValue() == MODES.WATCHDOG && this.isToggled() && !Pulsive.INSTANCE.getModuleManager().getModule(Scaffold.class).isToggled();
    }

    @EventHandler
    private final Listener<PlayerTeleportEvent> playerTeleportEventListener = event -> {
        if(mode.getValue() == MODES.ROTATION_DESYNC){
            if(mc.thePlayer.ticksExisted < 20){
                event.trySafeReject(0);
            }
        }

        if(mode.getValue() == MODES.WATCHDOG && Pulsive.INSTANCE.getModuleManager().getModule(Flight.class).isToggled()){
            event.trySafeReject(11);
        }

//        if(mode.getValue() == MODES.Reversed){
//            event.trySafeReject(0);
//        }

//        if(mode.getValue() == MODES.ticksExisted){
//            event.trySafeReject(0);
//        }

//        if(mode.getValue() == MODES.WATCHDOG){
//            if(mc.thePlayer.ticksExisted < 120){
//                event.setCancelled(true);
//                mc.thePlayer.setPositionAndRotation(event.getPosition().getPosX(), event.getPosition().getPosY(), event.getPosition().getPosZ(), event.getRotation().getRotationYaw(), event.getRotation().getRotationPitch());
//            }
//        }
//
//        if(mode.getValue() == MODES.Hypixel){
//            if(mc.thePlayer.ticksExisted < 100) event.setCancelled(true);
//        }
        y = event.getPosition().getPosY();
//        if(mode.getValue() == MODES.Hypixel){
//            event.setCancelled(true);
//            PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(event.getPosition().getPosX(), event.getPosition().getPosY(), event.getPosition().getPosZ(), mc.thePlayer.ticksExisted % 3 == 0));
//            mc.thePlayer.setPosition(event.getPosition().getPosX(), event.getPosition().getPosY(), event.getPosition().getPosZ());
//        }
    };


    @AllArgsConstructor
    private enum WATCHDOGCUSTOMADDONS {
        DEBUG("Debug"),
        DO_PING_MODIFICATIONS("Do Ping Mods"),
        C0F_PING("C0F Ping"),
        TIMER("Timer"),
        DELAY_MOVEMENT("Delay Movement"),
        FUNNY_PACKET("Funny XD"),
        FUNNY_MOVEMENT("Funny Movement"),
        C06_METHOD("C06 -> C04"),
        EXTRA_RANDOM("More Randomization");

        private final String modeName;

        @Override
        public String toString() {return modeName;}
    }
}
