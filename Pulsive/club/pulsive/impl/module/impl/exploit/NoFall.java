package club.pulsive.impl.module.impl.exploit;

import club.pulsive.api.event.eventBus.handler.EventHandler;
import club.pulsive.api.event.eventBus.handler.Listener;
import club.pulsive.impl.event.player.PlayerMotionEvent;
import club.pulsive.impl.module.Category;
import club.pulsive.impl.module.Module;
import club.pulsive.impl.module.ModuleInfo;
import club.pulsive.impl.property.implementations.DoubleProperty;
import club.pulsive.impl.property.implementations.EnumProperty;
import club.pulsive.impl.util.math.apache.ApacheMath;
import club.pulsive.impl.util.network.PacketUtil;
import club.pulsive.impl.util.player.PlayerUtil;
import lombok.AllArgsConstructor;
import net.minecraft.network.play.client.C03PacketPlayer;
import org.lwjgl.input.Keyboard;

@ModuleInfo(name = "NoFall", renderName = "No Fall", category = Category.EXPLOIT, keybind = Keyboard.KEY_NONE)

public class NoFall extends Module {
    private EnumProperty<MODES> mode = new EnumProperty<>("Mode", MODES.WATCHDOG);
    private DoubleProperty check = new DoubleProperty("Fall Distance", 3,3,4,1);
    @Override
    public void init() {
        this.addValueChangeListener(this.mode);
        super.init();
    }
    @EventHandler
    private final Listener<PlayerMotionEvent> playerMotionEventListener = event -> {
        switch(mode.getValue()) {
            case WATCHDOG:
                if(mc.thePlayer.fallDistance > check.getValue().floatValue() && PlayerUtil.isBlockUnder()) {
                    if(mc.thePlayer.motionY != ApacheMath.floor(mc.thePlayer.motionY)) {
                        if(mc.thePlayer.ticksExisted % 2 == 0) {
                            event.setGround(true);
                        }
                        PacketUtil.sendPacketNoEvent(new C03PacketPlayer(true));
                    }
                }
                break;
            case VANILLA:
                if(mc.thePlayer.fallDistance > check.getValue().floatValue() && PlayerUtil.isBlockUnder()) {
                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer(true));
                    mc.thePlayer.fallDistance = 0;
                }
                break;
            case AAC:
                if(mc.thePlayer.fallDistance > check.getValue().floatValue()) {
                    mc.thePlayer.motionY -= 0.48385636F;
                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer(true));
                }
                break;
        }
    };

    @AllArgsConstructor
    private enum MODES {
        WATCHDOG("Watchdog"),
        VANILLA("Vanilla"),
        AAC("AAC");

        private final String modeName;

        @Override
        public String toString() {return modeName;}
    }
}
